// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Gateway {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Gateway {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Gateway_CommonResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gateway.CommonResponse, global::Gateway.CommonResponse.Builder> internal__static_Gateway_CommonResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gateway_Login__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gateway.Login, global::Gateway.Login.Builder> internal__static_Gateway_Login__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gateway_Logout__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gateway.Logout, global::Gateway.Logout.Builder> internal__static_Gateway_Logout__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gateway_Subscribe__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gateway.Subscribe, global::Gateway.Subscribe.Builder> internal__static_Gateway_Subscribe__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Gateway_SubscribeResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Gateway.SubscribeResult, global::Gateway.SubscribeResult.Builder> internal__static_Gateway_SubscribeResult__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Gateway() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1nYXRld2F5LnByb3RvEgdHYXRld2F5Ii4KDkNvbW1vblJlc3BvbnNlEg8K", 
            "B3JldGNvZGUYASACKAUSCwoDbXNnGAIgAigJIhYKBUxvZ2luEg0KBXRva2Vu", 
            "GAEgAigJIhcKBkxvZ291dBINCgV0b2tlbhgBIAIoCSIrCglTdWJzY3JpYmUS", 
            "DQoFdG9rZW4YASACKAkSDwoHc3ViZGF0YRgCIAIoDCIrCg9TdWJzY3JpYmVS", 
          "ZXN1bHQSCwoDcmV0GAEgAigIEgsKA21zZxgCIAIoDA=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Gateway_CommonResponse__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Gateway_CommonResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gateway.CommonResponse, global::Gateway.CommonResponse.Builder>(internal__static_Gateway_CommonResponse__Descriptor,
                new string[] { "Retcode", "Msg", });
        internal__static_Gateway_Login__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Gateway_Login__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gateway.Login, global::Gateway.Login.Builder>(internal__static_Gateway_Login__Descriptor,
                new string[] { "Token", });
        internal__static_Gateway_Logout__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Gateway_Logout__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gateway.Logout, global::Gateway.Logout.Builder>(internal__static_Gateway_Logout__Descriptor,
                new string[] { "Token", });
        internal__static_Gateway_Subscribe__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Gateway_Subscribe__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gateway.Subscribe, global::Gateway.Subscribe.Builder>(internal__static_Gateway_Subscribe__Descriptor,
                new string[] { "Token", "Subdata", });
        internal__static_Gateway_SubscribeResult__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Gateway_SubscribeResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Gateway.SubscribeResult, global::Gateway.SubscribeResult.Builder>(internal__static_Gateway_SubscribeResult__Descriptor,
                new string[] { "Ret", "Msg", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommonResponse : pb::GeneratedMessage<CommonResponse, CommonResponse.Builder> {
    private CommonResponse() { }
    private static readonly CommonResponse defaultInstance = new CommonResponse().MakeReadOnly();
    private static readonly string[] _commonResponseFieldNames = new string[] { "msg", "retcode" };
    private static readonly uint[] _commonResponseFieldTags = new uint[] { 18, 8 };
    public static CommonResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CommonResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CommonResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gateway.Gateway.internal__static_Gateway_CommonResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CommonResponse, CommonResponse.Builder> InternalFieldAccessors {
      get { return global::Gateway.Gateway.internal__static_Gateway_CommonResponse__FieldAccessorTable; }
    }
    
    public const int RetcodeFieldNumber = 1;
    private bool hasRetcode;
    private int retcode_;
    public bool HasRetcode {
      get { return hasRetcode; }
    }
    public int Retcode {
      get { return retcode_; }
    }
    
    public const int MsgFieldNumber = 2;
    private bool hasMsg;
    private string msg_ = "";
    public bool HasMsg {
      get { return hasMsg; }
    }
    public string Msg {
      get { return msg_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRetcode) return false;
        if (!hasMsg) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _commonResponseFieldNames;
      if (hasRetcode) {
        output.WriteInt32(1, field_names[1], Retcode);
      }
      if (hasMsg) {
        output.WriteString(2, field_names[0], Msg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRetcode) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Retcode);
      }
      if (hasMsg) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Msg);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CommonResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CommonResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CommonResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CommonResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CommonResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CommonResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CommonResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CommonResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CommonResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CommonResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CommonResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CommonResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CommonResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CommonResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CommonResponse result;
      
      private CommonResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CommonResponse original = result;
          result = new CommonResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CommonResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gateway.CommonResponse.Descriptor; }
      }
      
      public override CommonResponse DefaultInstanceForType {
        get { return global::Gateway.CommonResponse.DefaultInstance; }
      }
      
      public override CommonResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CommonResponse) {
          return MergeFrom((CommonResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CommonResponse other) {
        if (other == global::Gateway.CommonResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRetcode) {
          Retcode = other.Retcode;
        }
        if (other.HasMsg) {
          Msg = other.Msg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commonResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commonResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRetcode = input.ReadInt32(ref result.retcode_);
              break;
            }
            case 18: {
              result.hasMsg = input.ReadString(ref result.msg_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRetcode {
        get { return result.hasRetcode; }
      }
      public int Retcode {
        get { return result.Retcode; }
        set { SetRetcode(value); }
      }
      public Builder SetRetcode(int value) {
        PrepareBuilder();
        result.hasRetcode = true;
        result.retcode_ = value;
        return this;
      }
      public Builder ClearRetcode() {
        PrepareBuilder();
        result.hasRetcode = false;
        result.retcode_ = 0;
        return this;
      }
      
      public bool HasMsg {
        get { return result.hasMsg; }
      }
      public string Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = "";
        return this;
      }
    }
    static CommonResponse() {
      object.ReferenceEquals(global::Gateway.Gateway.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Login : pb::GeneratedMessage<Login, Login.Builder> {
    private Login() { }
    private static readonly Login defaultInstance = new Login().MakeReadOnly();
    private static readonly string[] _loginFieldNames = new string[] { "token" };
    private static readonly uint[] _loginFieldTags = new uint[] { 10 };
    public static Login DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Login DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Login ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gateway.Gateway.internal__static_Gateway_Login__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Login, Login.Builder> InternalFieldAccessors {
      get { return global::Gateway.Gateway.internal__static_Gateway_Login__FieldAccessorTable; }
    }
    
    public const int TokenFieldNumber = 1;
    private bool hasToken;
    private string token_ = "";
    public bool HasToken {
      get { return hasToken; }
    }
    public string Token {
      get { return token_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToken) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _loginFieldNames;
      if (hasToken) {
        output.WriteString(1, field_names[0], Token);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasToken) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Token);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Login ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Login ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Login ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Login ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Login ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Login ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Login ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Login ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Login ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Login ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Login MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Login prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Login, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Login cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Login result;
      
      private Login PrepareBuilder() {
        if (resultIsReadOnly) {
          Login original = result;
          result = new Login();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Login MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gateway.Login.Descriptor; }
      }
      
      public override Login DefaultInstanceForType {
        get { return global::Gateway.Login.DefaultInstance; }
      }
      
      public override Login BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Login) {
          return MergeFrom((Login) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Login other) {
        if (other == global::Gateway.Login.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasToken) {
          Token = other.Token;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasToken = input.ReadString(ref result.token_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public string Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = "";
        return this;
      }
    }
    static Login() {
      object.ReferenceEquals(global::Gateway.Gateway.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Logout : pb::GeneratedMessage<Logout, Logout.Builder> {
    private Logout() { }
    private static readonly Logout defaultInstance = new Logout().MakeReadOnly();
    private static readonly string[] _logoutFieldNames = new string[] { "token" };
    private static readonly uint[] _logoutFieldTags = new uint[] { 10 };
    public static Logout DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Logout DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Logout ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gateway.Gateway.internal__static_Gateway_Logout__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Logout, Logout.Builder> InternalFieldAccessors {
      get { return global::Gateway.Gateway.internal__static_Gateway_Logout__FieldAccessorTable; }
    }
    
    public const int TokenFieldNumber = 1;
    private bool hasToken;
    private string token_ = "";
    public bool HasToken {
      get { return hasToken; }
    }
    public string Token {
      get { return token_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToken) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _logoutFieldNames;
      if (hasToken) {
        output.WriteString(1, field_names[0], Token);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasToken) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Token);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Logout ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Logout ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Logout ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Logout ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Logout ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Logout ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Logout ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Logout ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Logout ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Logout ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Logout MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Logout prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Logout, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Logout cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Logout result;
      
      private Logout PrepareBuilder() {
        if (resultIsReadOnly) {
          Logout original = result;
          result = new Logout();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Logout MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gateway.Logout.Descriptor; }
      }
      
      public override Logout DefaultInstanceForType {
        get { return global::Gateway.Logout.DefaultInstance; }
      }
      
      public override Logout BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Logout) {
          return MergeFrom((Logout) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Logout other) {
        if (other == global::Gateway.Logout.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasToken) {
          Token = other.Token;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_logoutFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _logoutFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasToken = input.ReadString(ref result.token_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public string Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = "";
        return this;
      }
    }
    static Logout() {
      object.ReferenceEquals(global::Gateway.Gateway.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Subscribe : pb::GeneratedMessage<Subscribe, Subscribe.Builder> {
    private Subscribe() { }
    private static readonly Subscribe defaultInstance = new Subscribe().MakeReadOnly();
    private static readonly string[] _subscribeFieldNames = new string[] { "subdata", "token" };
    private static readonly uint[] _subscribeFieldTags = new uint[] { 18, 10 };
    public static Subscribe DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Subscribe DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Subscribe ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gateway.Gateway.internal__static_Gateway_Subscribe__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Subscribe, Subscribe.Builder> InternalFieldAccessors {
      get { return global::Gateway.Gateway.internal__static_Gateway_Subscribe__FieldAccessorTable; }
    }
    
    public const int TokenFieldNumber = 1;
    private bool hasToken;
    private string token_ = "";
    public bool HasToken {
      get { return hasToken; }
    }
    public string Token {
      get { return token_; }
    }
    
    public const int SubdataFieldNumber = 2;
    private bool hasSubdata;
    private pb::ByteString subdata_ = pb::ByteString.Empty;
    public bool HasSubdata {
      get { return hasSubdata; }
    }
    public pb::ByteString Subdata {
      get { return subdata_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToken) return false;
        if (!hasSubdata) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _subscribeFieldNames;
      if (hasToken) {
        output.WriteString(1, field_names[1], Token);
      }
      if (hasSubdata) {
        output.WriteBytes(2, field_names[0], Subdata);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasToken) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Token);
      }
      if (hasSubdata) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, Subdata);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Subscribe ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Subscribe ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Subscribe ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Subscribe ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Subscribe ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Subscribe ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Subscribe ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Subscribe ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Subscribe ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Subscribe ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Subscribe MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Subscribe prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Subscribe, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Subscribe cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Subscribe result;
      
      private Subscribe PrepareBuilder() {
        if (resultIsReadOnly) {
          Subscribe original = result;
          result = new Subscribe();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Subscribe MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gateway.Subscribe.Descriptor; }
      }
      
      public override Subscribe DefaultInstanceForType {
        get { return global::Gateway.Subscribe.DefaultInstance; }
      }
      
      public override Subscribe BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Subscribe) {
          return MergeFrom((Subscribe) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Subscribe other) {
        if (other == global::Gateway.Subscribe.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasToken) {
          Token = other.Token;
        }
        if (other.HasSubdata) {
          Subdata = other.Subdata;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_subscribeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _subscribeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasToken = input.ReadString(ref result.token_);
              break;
            }
            case 18: {
              result.hasSubdata = input.ReadBytes(ref result.subdata_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public string Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = "";
        return this;
      }
      
      public bool HasSubdata {
        get { return result.hasSubdata; }
      }
      public pb::ByteString Subdata {
        get { return result.Subdata; }
        set { SetSubdata(value); }
      }
      public Builder SetSubdata(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubdata = true;
        result.subdata_ = value;
        return this;
      }
      public Builder ClearSubdata() {
        PrepareBuilder();
        result.hasSubdata = false;
        result.subdata_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Subscribe() {
      object.ReferenceEquals(global::Gateway.Gateway.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SubscribeResult : pb::GeneratedMessage<SubscribeResult, SubscribeResult.Builder> {
    private SubscribeResult() { }
    private static readonly SubscribeResult defaultInstance = new SubscribeResult().MakeReadOnly();
    private static readonly string[] _subscribeResultFieldNames = new string[] { "msg", "ret" };
    private static readonly uint[] _subscribeResultFieldTags = new uint[] { 18, 8 };
    public static SubscribeResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SubscribeResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SubscribeResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Gateway.Gateway.internal__static_Gateway_SubscribeResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SubscribeResult, SubscribeResult.Builder> InternalFieldAccessors {
      get { return global::Gateway.Gateway.internal__static_Gateway_SubscribeResult__FieldAccessorTable; }
    }
    
    public const int RetFieldNumber = 1;
    private bool hasRet;
    private bool ret_;
    public bool HasRet {
      get { return hasRet; }
    }
    public bool Ret {
      get { return ret_; }
    }
    
    public const int MsgFieldNumber = 2;
    private bool hasMsg;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    public bool HasMsg {
      get { return hasMsg; }
    }
    public pb::ByteString Msg {
      get { return msg_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRet) return false;
        if (!hasMsg) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _subscribeResultFieldNames;
      if (hasRet) {
        output.WriteBool(1, field_names[1], Ret);
      }
      if (hasMsg) {
        output.WriteBytes(2, field_names[0], Msg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRet) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Ret);
      }
      if (hasMsg) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, Msg);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SubscribeResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubscribeResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubscribeResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubscribeResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubscribeResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubscribeResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SubscribeResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SubscribeResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SubscribeResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubscribeResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SubscribeResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SubscribeResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SubscribeResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SubscribeResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SubscribeResult result;
      
      private SubscribeResult PrepareBuilder() {
        if (resultIsReadOnly) {
          SubscribeResult original = result;
          result = new SubscribeResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SubscribeResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Gateway.SubscribeResult.Descriptor; }
      }
      
      public override SubscribeResult DefaultInstanceForType {
        get { return global::Gateway.SubscribeResult.DefaultInstance; }
      }
      
      public override SubscribeResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SubscribeResult) {
          return MergeFrom((SubscribeResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SubscribeResult other) {
        if (other == global::Gateway.SubscribeResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRet) {
          Ret = other.Ret;
        }
        if (other.HasMsg) {
          Msg = other.Msg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_subscribeResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _subscribeResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRet = input.ReadBool(ref result.ret_);
              break;
            }
            case 18: {
              result.hasMsg = input.ReadBytes(ref result.msg_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRet {
        get { return result.hasRet; }
      }
      public bool Ret {
        get { return result.Ret; }
        set { SetRet(value); }
      }
      public Builder SetRet(bool value) {
        PrepareBuilder();
        result.hasRet = true;
        result.ret_ = value;
        return this;
      }
      public Builder ClearRet() {
        PrepareBuilder();
        result.hasRet = false;
        result.ret_ = false;
        return this;
      }
      
      public bool HasMsg {
        get { return result.hasMsg; }
      }
      public pb::ByteString Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = pb::ByteString.Empty;
        return this;
      }
    }
    static SubscribeResult() {
      object.ReferenceEquals(global::Gateway.Gateway.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
